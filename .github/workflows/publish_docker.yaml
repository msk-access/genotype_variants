name: Publish Docker Image

on:
  push:
    branches: [ main, master ]
    tags: [ '*', '!*-*' ]  # Match v1.2.3 but not v1.2.3-rc1
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.2.3)'
        required: false

# Set job-level environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKERFILE_PATH: ./Dockerfile
  BUILDX_CACHE_DIR: /tmp/.buildx-cache
  BUILDX_CACHE_KEY: ${{ github.ref }}-${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write  # For Trivy SARIF upload
      
    strategy:
      fail-fast: false
      matrix:
        platform: [linux/amd64, linux/arm64]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for version detection
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver-opts: |
            image=moby/buildkit:latest
            network=host
          buildkitd-config-inline: |
            [worker.oci]
              max-parallelism = 4
              
      - name: Get current date
        id: date
        run: echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule,pattern=nightly
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=long,prefix=sha-
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          flavor: |
            latest=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
          labels: |
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=${{ steps.date.outputs.date }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ github.ref_name }}

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx cache
        uses: actions/cache@v3
        with:
          path: ${{ env.BUILDX_CACHE_DIR }}
          key: buildx-${{ runner.os }}-${{ matrix.platform }}-${{ env.BUILDX_CACHE_KEY }}
          restore-keys: |
            buildx-${{ runner.os }}-${{ matrix.platform }}-
            buildx-${{ runner.os }}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ matrix.platform }}
          cache-from: type=local,src=${{ env.BUILDX_CACHE_DIR }}
          cache-to: type=local,dest=${{ env.BUILDX_CACHE_DIR }}-new,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            GENOTYPE_VARIANTS_VERSION=${{ github.ref_name }}
            BUILD_VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ steps.date.outputs.date }}
            VCS_REF=${{ github.sha }}
          provenance: ${{ github.event_name != 'pull_request' }}
          sbom: true
          secrets: |
            GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          vuln-type: 'os,library'
          exit-code: '1'
          timeout: '5m'

      - name: Upload Trivy scan results to GitHub Security tab
        if: always() && (github.event_name != 'pull_request')
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'container-scan'

      - name: Update Buildx cache
        if: github.event_name != 'pull_request'
        run: |
          rm -rf ${{ env.BUILDX_CACHE_DIR }}
          mv ${{ env.BUILDX_CACHE_DIR }}-new ${{ env.BUILDX_CACHE_DIR }}
          echo "Updated build cache"

      - name: Show image details
        if: always()
        run: |
          echo "Built image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Labels: ${{ steps.meta.outputs.labels }}"
